<?xml version="1.0" encoding="utf-8"?>
<!-- Comments in this file should be written in English to avoid non-ascii characters -->
<!-- See the following encoding-related bugs in TeamCity: -->
<!-- https://youtrack.jetbrains.com/issue/TW-1386 -->
<!-- https://youtrack.jetbrains.com/issue/TW-16083 -->
<!-- https://youtrack.jetbrains.com/issue/TW-38657 -->
<project name="front.api" default="main">
  <property name="git.exe" value="git"/>
  <property name="rms.build-number" value="2.4.0.0"/>
  <property name="dir.source" value="source"/>
  <property name="dir.destination" value="destination"/>
  <property name="dir.git-dir" value="${dir.destination}/.git"/>

  <target name="main" if="${git.has-changes}" depends="check-has-changes">
    <echo message="There are following changes:${line.separator}${git.status-result}"/>
    <antcall target="git-push"/>
    <echo message="The end :-)"/>
  </target>

  <target name="check-has-changes" depends="unzip-code-reference, eliminate-assembly-version">
    <!-- Help pages template describing some type or type member includes a reference to assembly containing that type,
         so generated pages contain a text with assembly version, which changes on every build.
         We don't want to publish docs on every rms builds, we don't want to analyze diffs, so now we are looking for new files only.

         TODO: detect useful changes and ignore files where only assembly version has changed,
               or generate pages using custom template, which doesn't contain assembly versions because api versioning relies on assembly name only -->
    <!-- TODO: add a flag to bypass this check and forcibly publish docs using a checkbox in the TeamCity build params -->
    <echo message="Checking for new files in ${dir.destination}..."/>
    <exec executable="${git.exe}" dir="${dir.destination}" outputproperty="git.status-result">
      <arg value="ls-files"/>
      <arg value="--others"/>
      <!-- looking only for new untracked files -->
      <arg value="--exclude-standard"/>
      <!-- not looking gitignore'd and other usually ignored files -->
    </exec>
    <condition property="git.has-changes">
      <not>
        <length string="${git.status-result}" length="0"/>
      </not>
    </condition>
    <echo message="Has changes: ${git.has-changes}"/>
  </target>

  <target name="unzip-code-reference" description="Create server-scripts.zip archive">
    <delete dir="${dir.destination}/docs/v7" />
    <delete dir="${dir.destination}/docs/v8" />
    <delete dir="${dir.destination}/docs/v9" />
    <unzip src="${dir.source}/docs/Resto.Front.Api.V7.Documentation.zip" dest="${dir.destination}/docs/v7" overwrite="true"/>
    <unzip src="${dir.source}/docs/Resto.Front.Api.V8.Documentation.zip" dest="${dir.destination}/docs/v8" overwrite="true"/>
    <unzip src="${dir.source}/docs/Resto.Front.Api.V9.Documentation.zip" dest="${dir.destination}/docs/v9" overwrite="true"/>
  </target>

  <target name="eliminate-assembly-version">
    <!-- generated html content looks like this (commit hash may also be used as a version number):

        <strong>Namespace:</strong>
       <a href="N_Resto_Front_Api_V6_Attributes_JetBrains.htm">Resto.Front.Api.V6.Attributes.JetBrains</a><br />
        <strong>Assembly:</strong>
       Resto.Front.Api.V6 (in Resto.Front.Api.V6.dll) Version: 0.0.0.0 (0.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse

         every line here is a separate line in a generated file (last line is trimmed, because it's too long)
         let's find assembly version by specific surrounding tags and drop the Version word with version number	-->
    <property name="assembly.version.pattern" value="(&lt;strong&gt;Assembly:&lt;/strong&gt;(.+?)[\w\.]+ \(in [\w\.]+\.dll\)) Version: .+?(&lt;div class=&quot;collapsibleAreaRegion&quot;&gt;&lt;span class=&quot;collapsibleRegionTitle&quot; onclick=&quot;SectionExpandCollapse)" />

    <replaceregexp flags="gs" replace="\1\3">
      <regexp pattern="${assembly.version.pattern}"/>
      <fileset dir="${dir.destination}/docs" includes="**/*.htm"/>
    </replaceregexp>
  </target>

  <target name="git-push" depends="git-commit">
    <echo message="Pushing changes..."/>
    <exec executable="${git.exe}" dir="${dir.destination}" description="Pushing changes to github" failonerror="true">
      <arg value="push"/>
      <arg value="origin"/>
      <arg value="master:master"/>
      <arg value="-v"/>
    </exec>
  </target>

  <target name="git-commit" depends="git-stage">
    <echo message="Committing changes..."/>
    <exec executable="${git.exe}" dir="${dir.destination}" description="Commiting changes" failonerror="true">
      <arg value="-c"/>
      <arg value="user.name=Build Server"/>
      <arg value="-c"/>
      <arg value="user.email=api@iiko.ru"/>
      <arg value="commit"/>
      <arg value="--message=Update SDK by changes from v${rms.build-number}"/>
    </exec>
  </target>

  <target name="git-stage">
    <echo message="Staging changes..."/>
    <exec executable="${git.exe}" dir="${dir.destination}" description="Staging changes" failonerror="true">
      <arg value="add"/>
      <arg value="--all"/>
    </exec>
  </target>
</project>